---

import BasicSliderCard from "../cards/BasicSliderCard.astro";
const { list } = Astro.props;

---

<section class="basic_slider_container">
    <div class="wrapper">
        <button class="left">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="31" viewBox="0 0 18 31" fill="none">
                <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M1.501 14.2064L14.7007 0.770998L18 4.12925L6.45 15.8855L18 27.6417L14.7007 31L1.501 17.5646C1.06357 17.1192 0.817831 16.5153 0.817831 15.8855C0.817831 15.2557 1.06357 14.6518 1.501 14.2064Z"
                    fill="white" />
            </svg>
        </button>
        
        <ul class="carousel">
            
            {
                list.map(({ title, category, url, image, description,logo }:{title: string, category: string, url: string, image: any, description: string, logo: any}) => (
                    <BasicSliderCard title={title} category={category} url={url} image={image} description={description} logo={logo}/>
                ))
              }
            

        </ul>

        <button class="right">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="31" viewBox="0 0 18 31" fill="none">
                <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M16.499 16.7936L3.29933 30.229L0 26.8708L11.55 15.1145L0 3.35825L3.29933 0L16.499 13.4354C16.9364 13.8808 17.1822 14.4847 17.1822 15.1145C17.1822 15.7443 16.9364 16.3482 16.499 16.7936Z"
                    fill="white" />
            </svg>
        </button>
    </div>


</section>

<script>
    document.addEventListener("DOMContentLoaded", () => {
    class Carousel {
        private carousel: HTMLDivElement;
        private arrowBtns: HTMLButtonElement[];
        private firstCardWidth: number;
        private isDragging: boolean = false;
        private startX: number | undefined;
        private startScrollLeft: number | undefined;

        constructor(carousel: HTMLDivElement, leftBtn: HTMLButtonElement, rightBtn: HTMLButtonElement) {
            this.carousel = carousel;
            this.arrowBtns = [leftBtn, rightBtn];
            this.firstCardWidth = carousel.querySelector<HTMLDivElement>(".card")?.offsetWidth || 0;
            this.initializeCarousel();
        }

        private initializeCarousel() {
            const carouselChildrens = Array.from(this.carousel.children);
            const cardPerView = Math.round(this.carousel.offsetWidth / this.firstCardWidth);

            carouselChildrens
                .slice(-cardPerView)
                .reverse()
                .forEach((card) => {
                    this.carousel.insertAdjacentHTML("afterbegin", (card as HTMLElement).outerHTML);
                });

            carouselChildrens.slice(0, cardPerView).forEach((card) => {
                this.carousel.insertAdjacentHTML("beforeend", (card as HTMLElement).outerHTML);
            });

            this.arrowBtns.forEach((btn) => {
                btn.addEventListener("click", () => {
                    this.carousel.scrollLeft += btn.className === "left" ? -this.firstCardWidth : this.firstCardWidth;
                });
            });

            this.carousel.addEventListener("mousedown", this.dragStart.bind(this));
            this.carousel.addEventListener("mousemove", this.dragging.bind(this));
            document.addEventListener("mouseup", this.dragStop.bind(this));
            this.carousel.addEventListener("scroll", this.infiniteScroll.bind(this));
        }

        private dragStart(e: MouseEvent) {
            this.isDragging = true;
            this.carousel.classList.add("dragging");
            this.startX = e.pageX;
            this.startScrollLeft = this.carousel.scrollLeft;
        }

        private dragging(e: MouseEvent) {
            if (!this.isDragging) return;
            this.carousel.scrollLeft = this.startScrollLeft! - (e.pageX - this.startX!);
        }

        private dragStop() {
            this.isDragging = false;
            this.carousel.classList.remove("dragging");
        }

        private infiniteScroll() {
            if (this.carousel.scrollLeft === 0) {
                this.carousel.classList.add("no-transition");
                this.carousel.scrollLeft = this.carousel.scrollWidth - 2 * this.carousel.offsetWidth;
                this.carousel.classList.remove("no-transition");
            } else if (
                Math.ceil(this.carousel.scrollLeft) ===
                this.carousel.scrollWidth - this.carousel.offsetWidth
            ) {
                this.carousel.classList.add("no-transition");
                this.carousel.scrollLeft = this.carousel.offsetWidth;
                this.carousel.classList.remove("no-transition");
            }
        }
    }

    document.querySelectorAll<HTMLDivElement>(".carousel").forEach(carousel => {
        const wrapper = carousel.closest(".wrapper");
        if (wrapper) {
            const leftBtn = wrapper.querySelector<HTMLButtonElement>(".left");
            const rightBtn = wrapper.querySelector<HTMLButtonElement>(".right");
            if (leftBtn && rightBtn) {
                new Carousel(carousel, leftBtn, rightBtn);
            }
        }
    });
});


</script>

<style>
 .basic_slider_container {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  padding: 0 35px;
  margin-top: 50px;
}
.basic_slider_container .wrapper {
  max-width: 1100px;
  width: 100%;
  position: relative;
}

.basic_slider_container .wrapper .carousel {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: calc((100% / 3) - 12px);
  gap: 16px;
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  scroll-behavior: smooth;
  scrollbar-width: none;
  padding-left: 0px;
}
.basic_slider_container .carousel::-webkit-scrollbar {
  display: none;
}
.basic_slider_container .carousel.dragging {
  scroll-snap-type: none!important;
  scroll-behavior: auto!important;
}
.basic_slider_container .carousel.no-transition {
  scroll-behavior: auto!important;
}


.basic_slider_container .wrapper button {
  width: 86px;
  height: 82px;
  flex-shrink: 0;
  background: #008fc5;
  box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.25);
  text-align: center;
  border: none;
  cursor: pointer;
  position: absolute;
  top: 20%;
  transform: translateY(-50%);
}
.basic_slider_container .wrapper button:first-child {
  left: -22px;
}
.basic_slider_container .wrapper button:last-child {
  right: -22px;
}

@media screen and (max-width: 1190px) {
  .basic_slider_container .wrapper .carousel {
    grid-auto-columns: calc((100% / 2) - 9px);
  }
  .basic_slider_container .wrapper {
    max-width: 900px;
  }
}
@media screen and (max-width: 1050px) {
  .basic_slider_container .wrapper .carousel {
    grid-auto-columns: calc((100% / 2) - 9px);
  }
  .basic_slider_container .wrapper {
    max-width: 700px;
  }
}
@media screen and (max-width: 900px) {
  .basic_slider_container .wrapper .carousel {
    grid-auto-columns: 100%;
  }

  .basic_slider_container .wrapper {
    max-width: 400px;
  }
}


</style>
